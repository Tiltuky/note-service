basePath: /
definitions:
  controller.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  controller.getAllNotesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Note'
        type: array
    type: object
  controller.signInInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  controller.statusResponse:
    properties:
      status:
        type: string
    type: object
  models.Note:
    properties:
      description:
        type: string
      id:
        type: integer
      title:
        type: string
    required:
    - title
    type: object
  models.UpdateNoteInput:
    properties:
      description:
        type: string
      title:
        type: string
    type: object
  models.User:
    properties:
      name:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - name
    - password
    - username
    type: object
host: localhost:8000
info:
  contact: {}
  description: API Server for Note-Service Application
  title: NOTE-SERVICE API
  version: "1.0"
paths:
  /api/notes:
    get:
      consumes:
      - application/json
      description: get all notes
      operationId: get-all-notes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.getAllNotesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all notes
      tags:
      - notes
    post:
      consumes:
      - application/json
      description: create note
      operationId: create-note
      parameters:
      - description: note info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Note'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create note
      tags:
      - notes
  /api/notes/:id:
    get:
      consumes:
      - application/json
      description: get note by id
      operationId: get-note-by-id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Note'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Note By Id
      tags:
      - notes
  /api/notes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific note by its ID
      operationId: delete-note
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/controller.statusResponse'
        "400":
          description: Invalid ID parameter
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Note not found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a note
      tags:
      - notes
    put:
      consumes:
      - application/json
      description: Update a specific note by its ID
      operationId: update-note
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated note information
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UpdateNoteInput'
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/controller.statusResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Note not found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a note
      tags:
      - notes
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: login
      operationId: login
      parameters:
      - description: credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controller.signInInput'
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: SignIn
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: create account
      operationId: create-account
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: SignUp
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
